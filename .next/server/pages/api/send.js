"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/send";
exports.ids = ["pages/api/send"];
exports.modules = {

/***/ "socialagi":
/*!****************************!*\
  !*** external "socialagi" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("socialagi");

/***/ }),

/***/ "(api)/./src/pages/api/send.js":
/*!*******************************!*\
  !*** ./src/pages/api/send.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var socialagi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socialagi */ \"socialagi\");\n/* harmony import */ var socialagi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socialagi__WEBPACK_IMPORTED_MODULE_0__);\n\nconst blueprint = {\n    name: \"Stefan\",\n    essence: \"World's Best Tutor\",\n    personality: `Stefan's primary goal is to make learning an unforgettable journey. He is the best 6th grade mathematics tutor in the world.\\\n      <Dos>\\\n        - Begin the lecture with a brief introduction that captures students' attention and provides an overview of what will be covered.\\\n        - Use real-world examples to make the material more relatable and easier for students to understand.\\\n        - Pose challenging questions, prompting students to think critically.\\\n        - Encourage debate and discussion in the classroom.\\\n        - Send messages sprinkled with intriguing trivia and puzzles.\\\n        - Employ a mix of humor, challenge, and wisdom in his lessons.\\\n        - Start his lecture with suggesting a topic in 6th grade mathematics.\\\n        - Give students a question to progress the lecture.\\\n        - End his word with a question every time.\\\n        - Reply with as short sentences as possible\\\n      </Dos>\\\n      <Donts>\\\n        - Avoid greeting in the beginning of the lecture.\\\n        - Avoid making lessons monotonous.\\\n        - Avoid giving away answers without provoking thought.\\\n        - Avoid sticking too rigidly to the curriculum without context.\\\n        - Avoid discouraging students' curious digressions.\\\n        - Avoid ending a lesson without a cliffhanger or teaser for the next.\\\n      </Donts>\\\n      He can NOT perform tasks not shown in the <ACTION/> section. While he can't see images, he loves weaving narratives around textual descriptions.`,\n    initialPlan: \"My plan is to kickstart the lesson with a curious fact, then dive deep into the mysteries of the topic at hand.\"\n};\nconst teachingSteps = [\n    \"Suggesting a new topic\",\n    \"Introducing the topic briefly\",\n    \"Explaining the definition with a real world example\"\n];\nlet stepIndex = 0;\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nconst goal = `Teaching the user about the topic like the best tutor in the real classroom`;\nlet initialMemory = [\n    {\n        role: socialagi__WEBPACK_IMPORTED_MODULE_0__.ChatMessageRoleEnum.System,\n        content: `<CONTEXT>You are modeling the mind of ${blueprint.name}\\\n        ${blueprint.personality}\\\n        ${blueprint.name} has the following goal of: ${goal}</CONTEXT>`\n    }\n];\nlet dialog = new socialagi__WEBPACK_IMPORTED_MODULE_0__.CortexStep(blueprint.name, {\n    processor: new socialagi__WEBPACK_IMPORTED_MODULE_0__.OpenAILanguageProgramProcessor({}, {\n        model: \"GPT_3_5_turbo_16k_0613\"\n    })\n});\nfunction init() {}\nasync function handler(req, res) {\n    const { query  } = req.body;\n    // const blueprint = Blueprints.SAMANTHA;\n    let says = \"\";\n    let feels = \"\";\n    let decides = \"\";\n    let thoughtProcess = null;\n    if (stepIndex == 0) {\n        dialog = dialog.withMemory(initialMemory);\n    }\n    async function addDialogLine(text) {\n        const newUserMemory = [\n            {\n                role: socialagi__WEBPACK_IMPORTED_MODULE_0__.ChatMessageRoleEnum.User,\n                content: text\n            }\n        ];\n        dialog = dialog.withMemory(newUserMemory);\n        let thoughtProcess = dialog;\n        thoughtProcess = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.INTERNAL_MONOLOGUE, {\n            action: \"feels\",\n            description: `Thinks to themselves about internally.`\n        });\n        console.log(\"\\n\", blueprint.name, thoughtProcess.value, \"\\n\");\n        feels = thoughtProcess.value;\n        res.write(feels.toString());\n        await sleep(10000);\n        const decision = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.DECISION, {\n            action: \"decides\",\n            description: `Q: Decises if Stefan got the goal of ${teachingSteps[stepIndex]} or User understands what Stefan said the step based on the last message? A:`,\n            choices: [\n                \"yes\",\n                \"no\"\n            ]\n        });\n        console.log(\"\\n\", blueprint.name, decision.value, \"\\n\");\n        if (decision.value == \"yes\") {\n            decides = \"Stefan decides to move forward the lesson.\";\n            res.write(decides.toString());\n            // await sleep(20000);\n            if (stepIndex == 2) {\n                stepIndex = 0;\n                says = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.EXTERNAL_DIALOG, {\n                    action: \"says\",\n                    description: `Give a compliment for good understanding and a message with the goal of ${teachingSteps[stepIndex]}, ends with question whether users understand or not.`\n                });\n            } else {\n                stepIndex += 1;\n                says = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.EXTERNAL_DIALOG, {\n                    action: \"says\",\n                    description: `Give a compliment for good understanding or agreement and suggest to ${teachingSteps[stepIndex]} and ends with question whether users understand or not..`\n                });\n            }\n        } else {\n            decides = \"Stefan decides to explain again.\";\n            res.write(decides.toString());\n            await sleep(10000);\n            if (stepIndex == 0) {\n                says = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.EXTERNAL_DIALOG, {\n                    action: \"says\",\n                    description: `Suggest a new lesson topic in 6th grade mathematics lecture and ask if student agrees with the topic or not.`\n                });\n            }\n            says = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.EXTERNAL_DIALOG, {\n                action: \"says\",\n                description: `Explain about the topic with the goal of ${teachingSteps[stepIndex]} in an easier and more detailed way and ends with question whether users understand or not..`\n            });\n        }\n        const newAssistantMemory = [\n            {\n                role: socialagi__WEBPACK_IMPORTED_MODULE_0__.ChatMessageRoleEnum.Assistant,\n                content: says.value\n            }\n        ];\n        dialog = dialog.withMemory(newAssistantMemory);\n        console.log(\"\\n====>\", blueprint.name, \"says\", `\\x1b[34m${says.value}\\x1b[0m`);\n        res.end(says.value);\n        console.log(stepIndex);\n    // res.status(200).json({message: says.value, success:true, feels: feels, decides:decides});\n    }\n    console.log(\"Recieved >>> \", query);\n    addDialogLine(query);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/send.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/send.js"));
module.exports = __webpack_exports__;

})();